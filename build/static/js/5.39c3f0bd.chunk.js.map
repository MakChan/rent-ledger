{"version":3,"sources":["pages/AcceptPayment.js","utils/constants.js"],"names":["StyledDiv","styled","div","_templateObject","Balance","span","_templateObject2","props","value","Row","_templateObject3","ADD_PAYMENT","gql","_templateObject4","calculateElectricity","reading","lease","charges","lastPayment","initialReading","calculator","createDecorator","field","updates","name","values","prev","rent","payment","balance","extraCharges","payment.electricityCharges","totalRent","totalPaid","payment.balance","AddTenant","_useQuery","useQuery","GET_CURRENT_LEASES","data","loading","_useMutation","useMutation","onCompleted","console","log","_useMutation2","Object","slicedToArray","addPayment","paymentData","react_default","a","createElement","Loader","size","options","currentLeases","map","label","concat","room","roomNo","tenant","date","Date","check_circle_outline_default","primaryColor","style","padding","react_final_form_es","onSubmit","leaseId","_id","_objectSpread","datePaid","initialRading","balanceIsElectricity","paidElectricityCharges","electricityCharges","variables","decorators","initialValues","_ref","handleSubmit","submitting","pristine","_ref2","input","Field","isRequired","DatePicker","_ref3","Select","assign","placeholder","Fragment","parse","parseInt","_ref4","Textfield","autoComplete","type","_ref5","_ref6","Checkbox","isChecked","_ref7","TextArea","resize","FormFooter","Button","appearance","isDisabled","isLoading"],"mappings":"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","file":"static/js/5.39c3f0bd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from \"@atlaskit/button\";\r\nimport { FormFooter } from \"@atlaskit/form\";\r\nimport { Form, Field } from \"react-final-form\";\r\n\r\nimport { Field as AtlasField } from \"@atlaskit/form\";\r\nimport TextArea from \"@atlaskit/textarea\";\r\nimport TextField from \"@atlaskit/textfield\";\r\nimport { Checkbox } from \"@atlaskit/checkbox\";\r\nimport Select from \"@atlaskit/select\";\r\nimport { DatePicker } from \"@atlaskit/datetime-picker\";\r\nimport CheckCircleOutlineIcon from \"@atlaskit/icon/glyph/check-circle-outline\";\r\n\r\nimport styled from \"styled-components\";\r\nimport createDecorator from \"final-form-calculate\";\r\n\r\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\r\nimport { gql } from \"apollo-boost\";\r\n\r\nimport { useAuthContext } from \"../utils/authContext\";\r\nimport { GET_CURRENT_LEASES } from \"../utils/queries\";\r\nimport { PER_UNIT_CHARGE } from \"../utils/constants\";\r\n\r\nimport { Loader, Wrapper } from \"../components/Loader\";\r\n\r\nconst StyledDiv = styled.div`\r\n  margin: 1.25rem 0;\r\n  font-size: 1rem;\r\n\r\n  span {\r\n    font-size: 1.2rem;\r\n  }\r\n`;\r\n\r\nconst Balance = styled.span`\r\n  font-size: 1.5rem;\r\n  color: ${props => (props.value >= 0 ? \"#00b700\" : \"palevioletred\")};\r\n`;\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n  margin: 0 -0.25rem;\r\n\r\n  & > div {\r\n    flex: 1 1 0;\r\n    padding: 0.25rem;\r\n  }\r\n\r\n  @media (max-width: 576px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nconst ADD_PAYMENT = gql`\r\n  mutation createPayment($payment: PaymentInput!, $leaseId: String!) {\r\n    createPayment(payment: $payment, leaseId: $leaseId) {\r\n      _id\r\n    }\r\n  }\r\n`;\r\n\r\nconst calculateElectricity = (reading, lease) => {\r\n  let charges = 0;\r\n  // if (!lease.lastPayment && !lease.lastPayment.reading)\r\n  if (!lease.lastPayment)\r\n    charges = (reading - lease.initialReading) * PER_UNIT_CHARGE;\r\n  else charges = (reading - lease.lastPayment.reading) * PER_UNIT_CHARGE;\r\n  return charges > 0 ? charges : 0;\r\n};\r\n\r\nconst calculator = createDecorator(\r\n  {\r\n    field: [\"lease\", \"payment.reading\"],\r\n    updates: (reading, name, values, prev) => {\r\n      if (!values.lease) return {};\r\n\r\n      let charges = 0;\r\n      let totalRent = 0;\r\n\r\n      if (name === \"lease\") {\r\n        totalRent = reading.value.rent;\r\n        if (values.payment.reading)\r\n          charges = calculateElectricity(\r\n            values.payment.reading,\r\n            values.lease.value\r\n          );\r\n      } else charges = calculateElectricity(reading, values.lease.value);\r\n\r\n      const balance =\r\n        values.lease.value.lastPayment &&\r\n        (values.lease.value.lastPayment.balance\r\n          ? values.lease.value.lastPayment.balance\r\n          : 0);\r\n\r\n      const extraCharges = values.lease.value.extraCharges\r\n        ? values.lease.value.extraCharges\r\n        : 0;\r\n      totalRent = values.lease.value.rent + charges + balance + extraCharges;\r\n      return {\r\n        \"payment.electricityCharges\": charges,\r\n        totalRent: totalRent\r\n      };\r\n    }\r\n  },\r\n  {\r\n    field: [\"payment.totalPaid\", \"payment.reading\"],\r\n    updates: (reading, name, values, prev) => {\r\n      if (name === \"payment.reading\" && !values.payment.totalPaid) return {};\r\n      return {\r\n        \"payment.balance\": values.payment.totalPaid - values.totalRent\r\n      };\r\n    }\r\n  }\r\n);\r\n\r\nconst AddTenant = () => {\r\n  //   const { userState } = useAuthContext();\r\n\r\n  const { data, loading } = useQuery(GET_CURRENT_LEASES);\r\n\r\n  const [addPayment, { data: paymentData }] = useMutation(ADD_PAYMENT, {\r\n    onCompleted: data => {\r\n      console.log(\"data\", data);\r\n      // Redirect to the room page\r\n      // Update cache\r\n      //   setUser(data.logIn);\r\n      //   history.push(\"/\");\r\n    }\r\n  });\r\n\r\n  if (loading) return <Loader size=\"large\" />;\r\n\r\n  const options = data.currentLeases.map(lease => ({\r\n    label: `${lease.room.roomNo} - ${lease.tenant.name}`,\r\n    value: lease\r\n  }));\r\n\r\n  const date = new Date();\r\n\r\n  const handleSubmit = data => {\r\n    const leaseId = data.lease.value._id;\r\n    let payment = { ...data.payment };\r\n    payment.datePaid = new Date(data.payment.datePaid);\r\n    payment.reading = payment.reading\r\n      ? payment.reading\r\n      : data.lease.value.lastPayment.reading\r\n      ? data.lease.value.lastPayment.reading\r\n      : data.lease.value.initialRading;\r\n    if (payment.balanceIsElectricity) {\r\n      payment.paidElectricityCharges = payment.balance;\r\n      payment.balance = 0;\r\n    } else {\r\n      payment.paidElectricityCharges = payment.electricityCharges;\r\n    }\r\n    addPayment({ variables: { leaseId, payment } });\r\n  };\r\n\r\n  if (paymentData)\r\n    return (\r\n      <Wrapper>\r\n        <CheckCircleOutlineIcon size=\"xlarge\" primaryColor=\"green\" />\r\n        <div>Saved</div>\r\n      </Wrapper>\r\n    );\r\n\r\n  return (\r\n    <div style={{ padding: \"1rem 2rem\" }}>\r\n      <h3>Accept Payment</h3>\r\n      <Form\r\n        onSubmit={handleSubmit}\r\n        decorators={[calculator]}\r\n        initialValues={{\r\n          payment: { datePaid: date }\r\n        }}\r\n      >\r\n        {({ handleSubmit, submitting, values, pristine }) => (\r\n          <form onSubmit={handleSubmit}>\r\n            <Row>\r\n              <Field name=\"payment.datePaid\" label=\"Date\">\r\n                {({ input }) => (\r\n                  <AtlasField name=\"date\" label=\"Date\" isRequired>\r\n                    {() => <DatePicker {...input} />}\r\n                  </AtlasField>\r\n                )}\r\n              </Field>\r\n\r\n              <Field name=\"lease\" label=\"Room\">\r\n                {({ input }) => (\r\n                  <AtlasField name=\"lease\" label=\"Room\" isRequired>\r\n                    {() => (\r\n                      <Select\r\n                        {...input}\r\n                        options={options}\r\n                        placeholder=\"Choose a room\"\r\n                      />\r\n                    )}\r\n                  </AtlasField>\r\n                )}\r\n              </Field>\r\n            </Row>\r\n            {values.lease && (\r\n              <>\r\n                <StyledDiv>\r\n                  Previous Reading :{\" \"}\r\n                  <span>\r\n                    {values.lease.value.lastPayment &&\r\n                    values.lease.value.lastPayment.reading\r\n                      ? values.lease.value.lastPayment.reading\r\n                      : values.lease.value.initialReading}\r\n                  </span>\r\n                </StyledDiv>\r\n                <Field\r\n                  name=\"payment.reading\"\r\n                  label=\"Current Reading\"\r\n                  parse={value => value && parseInt(value)}\r\n                >\r\n                  {({ input }) => (\r\n                    <AtlasField name=\"reading\" label=\"Current Reading\">\r\n                      {() => (\r\n                        <TextField\r\n                          autoComplete=\"off\"\r\n                          placeholder={\r\n                            values.lease.value.lastPayment &&\r\n                            values.lease.value.lastPayment.reading\r\n                              ? values.lease.value.lastPayment.reading\r\n                              : values.lease.value.initialReading\r\n                          }\r\n                          {...input}\r\n                          type=\"number\"\r\n                        />\r\n                      )}\r\n                    </AtlasField>\r\n                  )}\r\n                </Field>\r\n                <StyledDiv>\r\n                  Calculated Electricity Charges :{\" \"}\r\n                  <span>{values.payment.electricityCharges}</span>\r\n                </StyledDiv>\r\n\r\n                {values.lease.value.extraCharges > 0 && (\r\n                  <StyledDiv>\r\n                    Extra Charges :{\" \"}\r\n                    <span>{values.lease.value.extraCharges}</span>\r\n                  </StyledDiv>\r\n                )}\r\n\r\n                {values.lease.value.lastPayment &&\r\n                  values.lease.value.lastPayment.balance !== 0 && (\r\n                    <StyledDiv>\r\n                      Last Balance :{\" \"}\r\n                      <span>{values.lease.value.lastPayment.balance}</span>\r\n                    </StyledDiv>\r\n                  )}\r\n\r\n                <StyledDiv>\r\n                  Total Rent : <span>{values.totalRent}</span>\r\n                </StyledDiv>\r\n                <Field\r\n                  name=\"payment.totalPaid\"\r\n                  parse={value => value && parseInt(value)}\r\n                >\r\n                  {({ input }) => (\r\n                    <AtlasField name=\"reading\" label=\"Total Paid\" isRequired>\r\n                      {() => (\r\n                        <TextField\r\n                          autoComplete=\"off\"\r\n                          {...input}\r\n                          type=\"number\"\r\n                        />\r\n                      )}\r\n                    </AtlasField>\r\n                  )}\r\n                </Field>\r\n                <StyledDiv>\r\n                  Curent Balance :{\" \"}\r\n                  <Balance\r\n                    value={\r\n                      values.payment.balanceIsElectricity\r\n                        ? 0\r\n                        : values.payment.balance\r\n                    }\r\n                  >\r\n                    {values.payment.balanceIsElectricity\r\n                      ? 0\r\n                      : values.payment.balance}\r\n                  </Balance>\r\n                </StyledDiv>\r\n                {!values.payment.reading && values.payment.balance > 0 && (\r\n                  <Field name=\"payment.balanceIsElectricity\" type=\"checkbox\">\r\n                    {({ input }) => (\r\n                      <Checkbox\r\n                        label=\"Mark balance as Electricity Charge\"\r\n                        {...input}\r\n                        isChecked={input.value}\r\n                      />\r\n                    )}\r\n                  </Field>\r\n                )}\r\n\r\n                {values.payment.balanceIsElectricity && (\r\n                  <StyledDiv>\r\n                    Paid Electricity Charges :{\" \"}\r\n                    <span>{values.payment.balance}</span>\r\n                  </StyledDiv>\r\n                )}\r\n\r\n                <Field name=\"lease.remark\">\r\n                  {({ input }) => (\r\n                    <AtlasField name=\"remark\" label=\"Remarks\">\r\n                      {() => <TextArea resize=\"smart\" {...input} />}\r\n                    </AtlasField>\r\n                  )}\r\n                </Field>\r\n\r\n                <FormFooter>\r\n                  <Button\r\n                    type=\"submit\"\r\n                    appearance=\"primary\"\r\n                    isDisabled={\r\n                      submitting || pristine || !values.payment.totalPaid\r\n                    }\r\n                    isLoading={submitting}\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </FormFooter>\r\n              </>\r\n            )}\r\n          </form>\r\n        )}\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTenant;\r\n","export const PER_UNIT_CHARGE = 7.5;\r\n"],"sourceRoot":""}